<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.apabi.r2k.security.model.AuthOrgRole">

	<resultMap id="authOrgRoleResult" type="com.apabi.r2k.security.model.AuthOrgRole">
		<result property="id" column="ID" />
		<result property="orgId" column="ORG_ID" />
		<result property="roleId" column="ROLE_ID" />
		<result property="crtDate" column="CRT_DATE" />
		<result property="lastUpdate" column="LAST_UPDATE" />
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	ID ,
        	ORG_ID ,
        	ROLE_ID ,
        	CRT_DATE ,
        	LAST_UPDATE 
	    ]]>
	</sql>

	<sql id="dynamicWhere">
		<trim prefix="WHERE" prefixOverrides="AND|OR">
				<if test="id != null">
				AND ID = #{id}
				</if>
				<if test="orgId != null">
				AND ORG_ID = #{orgId}
				</if>
				<if test="roleId != null">
				AND ROLE_ID = #{roleId}
				</if>
				<if test="crtDate != null">
				AND CRT_DATE = #{crtDate}
				</if>
				<if test="lastUpdate != null">
				AND LAST_UPDATE = #{lastUpdate}
				</if>
		</trim>
	</sql>

	<insert id="insert" parameterType="com.apabi.r2k.security.model.AuthOrgRole">
    <![CDATA[
        INSERT INTO
        AUTH_ORG_ROLE (
        	ID ,
        	ORG_ID ,
        	ROLE_ID ,
        	CRT_DATE ,
        	LAST_UPDATE 
        ) VALUES (
        	#{id} ,
        	#{orgId} ,
        	#{roleId} ,
        	#{crtDate} ,
        	#{lastUpdate} 
        )
    ]]>
	</insert>
	
	<insert id="batchInsert"  useGeneratedKeys="true" parameterType="java.util.List">
		<selectKey resultType="long" keyProperty="id" order="AFTER">  
        SELECT LAST_INSERT_ID()  
    	</selectKey> 
	    <![CDATA[
	        INSERT INTO
	        AUTH_ORG_ROLE (
	        	ID ,
	        	ORG_ID ,
	        	ROLE_ID ,
	        	CRT_DATE ,
	        	LAST_UPDATE 
	        ) VALUES 
	    ]]>
	    <foreach collection="authOrgRoles" item="item" index="index" separator=",">    
	        (
	        	#{item.id} ,
	        	#{item.orgId} ,
	        	#{item.roleId} ,
	        	#{item.crtDate} ,
	        	#{item.lastUpdate} 
	        )
	   </foreach> 
	</insert>

	<update id="update" parameterType="com.apabi.r2k.security.model.AuthOrgRole">
		UPDATE AUTH_ORG_ROLE
		<trim prefix="SET" suffixOverrides=",">
	        		<if test="orgId != null">
	        			ORG_ID = #{orgId},
	        		</if>
	        		<if test="roleId != null">
	        			ROLE_ID = #{roleId},
	        		</if>
	        		<if test="crtDate != null">
	        			CRT_DATE = #{crtDate},
	        		</if>
	        		<if test="lastUpdate != null">
	        			LAST_UPDATE = #{lastUpdate},
	        		</if>
		</trim>
		<where>
			ID = #{ID}
		</where>
	</update>


	<delete id="delete" parameterType="map">
    <![CDATA[
        delete from AUTH_ORG_ROLE
    ]]>
		<where>
			ID = #{ID}
		</where>
	</delete>

	<delete id="batchDelete" parameterType="java.util.List">
		<![CDATA[
        delete from AUTH_ORG_ROLE
    	]]>
    	<where>
			ID in 
			<foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
				#{id}}
			</foreach>
		</where>
	</delete>
	
	<select id="getById" resultMap="authOrgRoleResult">
		select
		<include refid="commonColumns" />
	    <![CDATA[
	        from AUTH_ORG_ROLE 
	        where 
		        ID = #{id} 
	    ]]>
	</select>

	<select id="count" resultType="long">
    <![CDATA[
        select count(*) from AUTH_ORG_ROLE
    ]]>
    <include refid="dynamicWhere" />
	</select>

	<!-- 分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页 因为分页查询将传 #offset#,#pageSize#,#lastRows# 
		三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现 -->
	<select id="pageSelect" resultMap="authOrgRoleResult">
		select
		<include refid="commonColumns" />
	    <![CDATA[
	        from AUTH_ORG_ROLE 
	    ]]>
		<include refid="dynamicWhere" />
		<if test="sortColumns != null">
			ORDER BY ${sortColumns}
		</if>
	</select>

	<delete id="deleteByOrgId" parameterType="map">
	    <![CDATA[
	        delete from AUTH_ORG_ROLE
	    ]]>
		<where>
			ORG_ID = #{orgid}
		</where>
	</delete>
	<delete id="deleteByRoleId" parameterType="map">
		delete from AUTH_ORG_ROLE where ORG_ID=#{orgId} and ROLE_ID in
		<foreach collection="roleIds" item="id" index="index" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
</mapper>
